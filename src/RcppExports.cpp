// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hzz
arma::mat hzz(int n, arma::mat Prec, arma::mat A, arma::vec lb, arma::vec ub, arma::vec init, double T);
RcppExport SEXP _sampletmvn_hzz(SEXP nSEXP, SEXP PrecSEXP, SEXP ASEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP initSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Prec(PrecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(hzz(n, Prec, A, lb, ub, init, T));
    return rcpp_result_gen;
END_RCPP
}
// lg2015
arma::mat lg2015(int n, arma::vec z, arma::mat R, arma::vec Rz, arma::vec a, arma::vec b, Rcpp::String sampler);
RcppExport SEXP _sampletmvn_lg2015(SEXP nSEXP, SEXP zSEXP, SEXP RSEXP, SEXP RzSEXP, SEXP aSEXP, SEXP bSEXP, SEXP samplerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Rz(RzSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type sampler(samplerSEXP);
    rcpp_result_gen = Rcpp::wrap(lg2015(n, z, R, Rz, a, b, sampler));
    return rcpp_result_gen;
END_RCPP
}
// rhmc
arma::mat rhmc(int n, arma::mat R, arma::vec lb, arma::vec ub, int burnin, arma::vec initial, double traj_length, double max_stepsize, double max_relative_stepsize, int implicit_iter);
RcppExport SEXP _sampletmvn_rhmc(SEXP nSEXP, SEXP RSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP burninSEXP, SEXP initialSEXP, SEXP traj_lengthSEXP, SEXP max_stepsizeSEXP, SEXP max_relative_stepsizeSEXP, SEXP implicit_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< double >::type traj_length(traj_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type max_stepsize(max_stepsizeSEXP);
    Rcpp::traits::input_parameter< double >::type max_relative_stepsize(max_relative_stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type implicit_iter(implicit_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(rhmc(n, R, lb, ub, burnin, initial, traj_length, max_stepsize, max_relative_stepsize, implicit_iter));
    return rcpp_result_gen;
END_RCPP
}
// rsm
arma::mat rsm(int n_samples, arma::vec mode, arma::mat Sigma, arma::vec Prec_mode, arma::vec lb, arma::vec ub, arma::mat A);
RcppExport SEXP _sampletmvn_rsm(SEXP n_samplesSEXP, SEXP modeSEXP, SEXP SigmaSEXP, SEXP Prec_modeSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Prec_mode(Prec_modeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rsm(n_samples, mode, Sigma, Prec_mode, lb, ub, A));
    return rcpp_result_gen;
END_RCPP
}
// rsm_axis
arma::mat rsm_axis(int n_samples, arma::vec mode, arma::mat Sigma, arma::vec Prec_mode, arma::vec lb, arma::vec ub);
RcppExport SEXP _sampletmvn_rsm_axis(SEXP n_samplesSEXP, SEXP modeSEXP, SEXP SigmaSEXP, SEXP Prec_modeSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Prec_mode(Prec_modeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rsm_axis(n_samples, mode, Sigma, Prec_mode, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// ry2004
arma::mat ry2004(int n, arma::vec alpha, arma::vec z, arma::mat D, arma::vec Dz, arma::vec lb, arma::vec ub, Rcpp::String sampler);
RcppExport SEXP _sampletmvn_ry2004(SEXP nSEXP, SEXP alphaSEXP, SEXP zSEXP, SEXP DSEXP, SEXP DzSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP samplerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Dz(DzSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type sampler(samplerSEXP);
    rcpp_result_gen = Rcpp::wrap(ry2004(n, alpha, z, D, Dz, lb, ub, sampler));
    return rcpp_result_gen;
END_RCPP
}
// rtuvn
arma::vec rtuvn(int n, double mean, double sd, double lower, double upper);
RcppExport SEXP _sampletmvn_rtuvn(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtuvn(n, mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sampletmvn_hzz", (DL_FUNC) &_sampletmvn_hzz, 7},
    {"_sampletmvn_lg2015", (DL_FUNC) &_sampletmvn_lg2015, 7},
    {"_sampletmvn_rhmc", (DL_FUNC) &_sampletmvn_rhmc, 10},
    {"_sampletmvn_rsm", (DL_FUNC) &_sampletmvn_rsm, 7},
    {"_sampletmvn_rsm_axis", (DL_FUNC) &_sampletmvn_rsm_axis, 6},
    {"_sampletmvn_ry2004", (DL_FUNC) &_sampletmvn_ry2004, 8},
    {"_sampletmvn_rtuvn", (DL_FUNC) &_sampletmvn_rtuvn, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sampletmvn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
