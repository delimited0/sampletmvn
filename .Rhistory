A = diag(d)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(2, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(2, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(2, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2, init = c(1, 1))
n = 1000
d = 2
mu = rep(2, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(0, d)
ub = rep(Inf, d)
A = diag(d)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(10, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
.Machine$double.eps
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
library(sampletmvn)
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(n, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(10, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(2, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(2, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
# trapezoid test ----------------------------------------------------------
n = 1000
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 1,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2,
init = c(1, 1), p_init = c(.1, .1))
hzz_samples = sampletmvn::sample_hamiltonian_zigzag(1, mu, Sigma, lb, ub, A,
intg_time = 2,
init = c(1, 1), p_init = c(.1, .1))
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma,
lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
library(sampletmvn)
library(sampletmvn)
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
plot(lg2015_samples, main = "LG2015", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
diag(length(rep(1, 10)))
library(sampletmvn)
source("~/Research/linear_constraint_mvn_survey/sampling_wrapper.R")
library(sampletmvn)
n = 1000
d = 2
mu = rep(2, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(0, d)
ub = rep(Inf, d)
A = diag(d)
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma,
lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
gibbs_ry2004(n, mu, Sigma, lb, ub, initial = c(1, 1), burnin = 100,
tuvn_sampler = "lg2015")
alpha
z
D
A
diag(length*mu)
diag(length(mu))
init
Sigma
L
D
A
library(sampletmvn)
gibbs_ry2004(n, mu, Sigma, lb, ub, initial = c(1, 1), burnin = 100,
tuvn_sampler = "lg2015")
A
print(n)
mu
Sigma
lb
ub
lb
ub
gibbs_ry2004(n, mu, Sigma, lb = lb, ub = ub, initial = c(1, 1), burnin = 100,
tuvn_sampler = "lg2015")
mu
Sigma
lb
source("~/Research/linear_constraint_mvn_survey/sampling_wrapper.R")
source("~/Research/linear_constraint_mvn_survey/sampling_wrapper.R")
library(sampletmvn)
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015", pch = '+')
n = 1000
d = 2
muf <- function(d) rep(1, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015")
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004")
library(sampletmvn)
Sigma = .5 * diag(2) + .5*rep(1, 2)%*% t(rep(1, 2))
Sigma
L = t(chol(Sigma))
L
solve(L)
Prec = solve(Sigma)
Prec
U = chol(Prec)
U
Sigma = .5 * diag(3) + .5*rep(1, 3)%*% t(rep(1, 3))
L = t(chol(Sigma))
L
Prec=solve(SIgma)
Prec=solve(Sigma)
Prec
U = chol(Prec)
U
solve(L)
t(solve(L))
t(U)
solve(L) %*% c(1,1)
solve(L) %*% c(1,1,1)
c(1, 1, 1) %*% U
c(1, 1, 1) %*% t(U)
n = 1000
d = 2
muf <- function(d) rep(1, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma, lb, ub, A)
plot(rsm_samples, main = "RSM")
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma = Sigma, lb, ub, A)
rsm_samples = sampletmvn::sample_rsm(n, mu, Sigma = Sigma, lb = lb, ub = ub,
A = A)
plot(rsm_samples, main = "RSM")
library(sampletmvn)
library(sampletmvn)
library(sampletmvn)
library(sampletmvn)
library(sampletmvn)
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
source("~/Research/linear_constraint_mvn_survey/sampling_wrapper.R")
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(0, 0))
plot(rhmc_samples, main = "RHMC", pch = "+")
?volesti::direct_sampling
?volesti::sample_points
install.packages(c("doFuture", "RcppArmadillo", "RcppEigen"))
devtools::install_github("GeomScale/volesti", branch="develop")
devtools::install_github("GeomScale/volesti/R-proj", branch="develop")
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(1, 1))
initial
Sigma
print(Sigma)
library(sampletmvn)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(1, 1))
library(sampletmvn)
library(sampletmvn)
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(rhmc_samples, main = "RHMC", pch = "+")
n = 1000
d = 2
mu = rep(2, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(0, d)
ub = rep(Inf, d)
A = diag(d)
rhmc_samples = sampletmvn::sample_rhmc(n, mu, Sigma, lb, ub, initial = c(1, 1))
plot(rhmc_samples, main = "RHMC")
library(sampletmvn)
MASS::ginv
?MASS::ginv
library(sampletmvn)
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015", pch = '+')
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(1, 1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004", pch = '+')
max_polytope = function(y) {
n = length(y)
idx = which(y == 1)
D = -1*diag(n-1)
if (idx == 1)
A = cbind(1, D)
else if (idx == n)
A = cbind(D, 1)
else
A = cbind(D[, 1:(idx-1)], rep(1, n-1), D[, idx:(n-1)])
return(A)
}
y = c(0, 1, 0)
A = max_polytope(y)
n = 1000
lb = rep(0, 2)
ub = rep(Inf, 2)
A
mu = rep(0, 2)
Sigma = diag(2)
sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015")
mui
mu
Sigma
mu = rep(0, 3)
Sigma = diag(3)
sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015")
y
A
samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015")
samples
samples[321, ]
A %*% samples[321, ]
samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015",
init = 2 * y - 1)
samples''
samples
A %*% samples[321, ]
A %*% samples
samples %*% A
apply(samples, 1, function(s) A %*% s)
apply(samples, 1, function(s) {
As = A %*% s
As <= ub & As >= lb
})
sum(apply(samples, 1, function(s) {
As = A %*% s
As <= ub & As >= lb
}))
n = 3000
d = 2
mu = rep(1, d)
Sigma = .5 * diag(d) + .5 * rep(1, d) %*% t(rep(1, d))
lb = rep(-2, d)
ub = rep(2, d)
A = diag(d)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma,lb, ub,
init = c(1, 1), thin = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015", pch = '+')
max_polytope = function(y) {
n = length(y)
idx = which(y == 1)
D = -1*diag(n-1)
if (idx == 1)
A = cbind(1, D)
else if (idx == n)
A = cbind(D, 1)
else
A = cbind(D[, 1:(idx-1)], rep(1, n-1), D[, idx:(n-1)])
return(A)
}
y = c(0, 1, 0)
A = max_polytope(y)
lb = rep(0, 2)
ub = rep(Inf, 2)
n = 1000
mu = rep(0, 3)
Sigma = diag(3)
samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015",
init = 2 * y - 1)
sum(apply(samples, 1, function(s) {
As = A %*% s
As <= ub & As >= lb
}))
samples
library(sampletmvn)
n = 1000
d = 2
muf <- function(d) rep(1, d)
Sigmaf <- function(d) diag(d)
lbf <- function(d) rep(-Inf, 2*d)
ubf <- function(d) c(0, rep(2, 2*d-1))
Af <- function(d) {
lower_bounds <- -diag(d)
upper_bounds <- diag(d)
upper_bounds[1, ] <- c(2, 1, rep(0, d-2))
A <- rbind(upper_bounds, lower_bounds)
return(A)
}
mu = muf(d)
Sigma = Sigmaf(d)
lb = lbf(d)
ub = ubf(d)
A = Af(d)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
library(sampletmvn)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
Sigma.chol
dim(samples)
final.ind
length(final.ind)
library(sampletmvn)
library(sampletmvn)
library(sampletmvn)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
dim(samples)
final.ind
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
Sigma.chol %*% samples[, final.ind, drop = FALSE]
dim(Sigma.chol %*% samples[, final.ind, drop = FALSE])
dim(mu)
length*mu
length(mu)
matrix(rep(mu, n), nrow = n, byrow = TRUE)
dim(matrix(rep(mu, n), nrow = n, byrow = TRUE))
samples <-
Sigma.chol %*% samples[, final.ind, drop = FALSE] +
matrix(rep(mu, n), ncol = n, byrow = TRUE)
library(sampletmvn)
lg2015_samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), burn = 0,
tuvn_sampler = "be2017")
plot(lg2015_samples, main = "LG2015")
ry2004_samples = sampletmvn::sample_gibbs_ry2004(n, mu, Sigma, lb, ub, A,
init = c(-1, -1), thin = 0,
tuvn_sampler = "lg2015")
plot(ry2004_samples, main = "RY2004")
max_polytope = function(y) {
n = length(y)
idx = which(y == 1)
D = -1*diag(n-1)
if (idx == 1)
A = cbind(1, D)
else if (idx == n)
A = cbind(D, 1)
else
A = cbind(D[, 1:(idx-1)], rep(1, n-1), D[, idx:(n-1)])
return(A)
}
y = c(0, 1, 0)
A = max_polytope(y)
lb = rep(0, 2)
ub = rep(Inf, 2)
n = 1000
mu = rep(0, 3)
Sigma = diag(3)
samples = sampletmvn::sample_gibbs_lg2015(n, mu, Sigma, lb, ub, A, tuvn_sampler = "lg2015",
init = 2 * y - 1)
sum(apply(samples, 1, function(s) {
As = A %*% s
As <= ub & As >= lb
}))
library(sampletmvn)
